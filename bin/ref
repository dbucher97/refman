#! /usr/bin/env python3

import argparse
import os
import sys


def file_path(path):
    return os.path.abspath(path)


def parse_config():
    default_dir = os.path.join(os.getenv('HOME'), 'papers')
    try:
        with open(os.path.join(os.getenv('HOME'), '.refman.conf'), 'r') as f:
            for l in f:
                k, v = l.split('=')
                k = k.strip()
                v = v.strip()
                if k == 'dir':
                    default_dir = os.path.expanduser(v)
    except FileNotFoundError:
        pass
    return default_dir


class RefMan():

    def __init__(self):
        self.path = parse_config()
        parser = argparse.ArgumentParser(
            description='BibTeX reference manger',
            usage='''ref <command> [<args>]

The available subommands are:
   watch            Watch the defiend directory and add every incoming PDF.
   open             Open a pdf by reference ID.
   info             Get Meta Info for a PDF.
   complete         Autocomplete String.
   refetch          Refetch data from DOI.
   start            Start watching in background.
   stop             Stop watching in background.
   fix              Jump to manual action in bib database.
   file_check       Get file errors.
   update_pdfs      Update pdfs.
   edit             Edit the BibTeX file.
''')
#   add       Download objects and refs from another repository
#   remove    Download objects and refs from another repository
# ''')
        parser.add_argument('command', help='Subcommand to run')
        args = parser.parse_args(sys.argv[1:2])
        if not hasattr(self, args.command):
            print('Unrecognized command')
            parser.print_help()
            exit(1)

        getattr(self, args.command)()

    def watch(self):
        from notifypy import Notify
        from refman import Observer
        n = Notify(default_notification_application_name='RefMan')
        n.title = 'Observation started'
        n.message = f'Reference Directory "{self.path}"'
        n.send()
        obs = Observer(self.path)
        obs.start()

    def open(self):
        from refman import Database
        parser = argparse.ArgumentParser(description="Open a PDF by BibTeX ID")
        parser.add_argument('id', help='The BiTeX ID')
        args = parser.parse_args(sys.argv[2:])
        db = Database(self.path)
        path = db.get(args.id, 'path')
        os.system(f'open -n -a Skim --args {path}')

    def info(self):
        from refman import Info
        parser = argparse.ArgumentParser(description="Get PDF Metainfo")
        parser.add_argument('pdf', help='The PDF')
        args = parser.parse_args(sys.argv[2:])
        info = Info(args.pdf)
        info.retrieve()
        print(info.get_dict())

    def complete(self):
        from refman import Database
        os.system(f'cat "{Database.get_cache(self.path)}"')

    def start(self):
        os.system(
            'launchctl load -w /usr/local/opt/refman/plist/com.bucher.refman.plist')

    def stop(self):
        os.system(
            'launchctl unload -w /usr/local/opt/refman/plist/com.bucher.refman.plist')

    def fix(self):
        os.system(f'nvim {os.path.join(self.path, "master.bib")} -c ":set '+ 
                'autoread | map <leader>r :checktime<CR> | /todo"')

    def edit(self):
        os.system(f'nvim {os.path.join(self.path, "master.bib")} -c ":set '+ 
                'autoread | map <leader>r :checktime<CR>"')

    def file_check(self):
        from refman import Database
        db = Database(self.path)
        for e in db:
            path = e.get('path')
            check = False
            if path:
                check = os.path.isfile(path)
                path = 'DIR' + path[len(self.path):]
            else:
                path = ""
            print(f'{e.get("ID"): <16} {"✅" if check else "⛔️"} {path}')

    def refetch(self):
        if os.popen('launchctl list com.bucher.refman 2> /dev/null').read() == '':
            from refman import Database
            db = Database(self.path)
            db.refetch()
            db.save()
        else:
            print("Please stop refman first")

    def update_pdfs(self):
        from refman import Database
        db = Database(self.path)
        db.update_pdfs()



if __name__ == '__main__':
    RefMan()
